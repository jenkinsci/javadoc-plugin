package hudson.tasks;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.junit.jupiter.api.Assertions.*;

import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.Action;
import hudson.model.BuildListener;
import hudson.model.FreeStyleBuild;
import hudson.model.FreeStyleProject;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.scm.NullSCM;
import hudson.scm.SCMRevisionState;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.jenkinsci.plugins.workflow.job.WorkflowRun;
import org.junit.jupiter.api.Test;
import org.jvnet.hudson.test.Issue;
import org.jvnet.hudson.test.JenkinsRule;
import org.jvnet.hudson.test.TestBuilder;
import org.jvnet.hudson.test.junit.jupiter.WithJenkins;

@WithJenkins
class JavadocArchiverTest {

    @Test
    void configRoundtrip(JenkinsRule r) throws Exception {
        verify(r, new JavadocArchiver("foo", true));
        verify(r, new JavadocArchiver(".", false));
    }

    private void verify(JenkinsRule r, JavadocArchiver before) throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getPublishersList().add(before);
        r.configRoundtrip(p);
        r.assertEqualDataBoundBeans(before, p.getPublishersList().get(JavadocArchiver.class));
    }

    @Test
    @Issue("JENKINS-32619")
    void renderJavadoc(JenkinsRule r) throws Exception {
        FreeStyleProject s8 = setupJavadocProject(r, "javadoc-single-8");
        FreeStyleProject s11 = setupJavadocProject(r, "javadoc-single-11");
        FreeStyleProject m8 = setupJavadocProject(r, "javadoc-multi-8");
        FreeStyleProject m11 = setupJavadocProject(r, "javadoc-multi-11");
        // r.interactiveBreak();
        validateJavadocReport(r, s8);
        validateJavadocReport(r, s11);
        validateJavadocReport(r, m8);
        validateJavadocReport(r, m11);
    }

    private static FreeStyleProject setupJavadocProject(JenkinsRule r, String s) throws Exception {
        FreeStyleProject p = r.createFreeStyleProject(s);
        p.setScm(new CopyResourceDir(JavadocArchiverTest.class.getResource(s), "javadoc"));
        p.getPublishersList().add(new JavadocArchiver("javadoc", true));
        r.buildAndAssertSuccess(p);
        return p;
    }

    private static void validateJavadocReport(JenkinsRule r, FreeStyleProject p) throws Exception {
        FreeStyleBuild b = p.getBuildByNumber(1);
        assertShowsDoc(r, b.getAction(JavadocArchiver.JavadocBuildAction.class), b.getUrl(), "com.mycompany.app");
        assertShowsDoc(r, p.getAction(JavadocArchiver.JavadocAction.class), p.getUrl(), "com.mycompany.app");
    }

    @Test
    void keepAll(JenkinsRule r) throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getBuildersList().add(new MakeDocBuilder());
        p.getPublishersList().add(new JavadocArchiver("doc", true));
        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);
        FreeStyleBuild b2 = r.buildAndAssertSuccess(p);
        assertShowsDoc(r, b1.getAction(JavadocArchiver.JavadocBuildAction.class), b1.getUrl(), "generated by #1");
        assertShowsDoc(r, b2.getAction(JavadocArchiver.JavadocBuildAction.class), b2.getUrl(), "generated by #2");
        assertShowsDoc(r, p.getAction(JavadocArchiver.JavadocAction.class), p.getUrl(), "generated by #2");
    }

    @Test
    void doNotKeepAll(JenkinsRule r) throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getBuildersList().add(new MakeDocBuilder());
        p.getPublishersList().add(new JavadocArchiver("doc", false));
        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);
        FreeStyleBuild b2 = r.buildAndAssertSuccess(p);
        assertHidden(b1.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertHidden(b2.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertShowsDoc(r, p.getAction(JavadocArchiver.JavadocAction.class), p.getUrl(), "generated by #2");
    }

    @Test
    void keepAllInPipeline(JenkinsRule r) throws Exception {
        WorkflowJob job = r.createProject(WorkflowJob.class);
        job.setDefinition(new CpsFlowDefinition(
                """
                node {
                  writeFile text: 'generated by #'+env.BUILD_NUMBER, file: 'doc/index.html'
                  javadoc javadocDir: 'doc', keepAll: true
                }
                """,
                true));

        WorkflowRun b1 = r.buildAndAssertSuccess(job);
        WorkflowRun b2 = r.buildAndAssertSuccess(job);

        assertShowsDoc(r, b1.getAction(JavadocArchiver.JavadocBuildAction.class), b1.getUrl(), "generated by #1");
        assertShowsDoc(r, b2.getAction(JavadocArchiver.JavadocBuildAction.class), b2.getUrl(), "generated by #2");
        assertShowsDoc(r, job.getAction(JavadocArchiver.JavadocAction.class), job.getUrl(), "generated by #2");
    }

    @Test
    void doNotKeepAllInPipeline(JenkinsRule r) throws Exception {
        WorkflowJob job = r.createProject(WorkflowJob.class);
        job.setDefinition(new CpsFlowDefinition(
                """
                node {
                  writeFile text: 'generated by #'+env.BUILD_NUMBER, file: 'doc/index.html'
                  javadoc javadocDir: 'doc', keepAll: false
                }
                """,
                true));

        WorkflowRun b1 = r.buildAndAssertSuccess(job);
        WorkflowRun b2 = r.buildAndAssertSuccess(job);

        assertHidden(b1.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertHidden(b2.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertShowsDoc(r, job.getAction(JavadocArchiver.JavadocAction.class), job.getUrl(), "generated by #2");
    }

    private static final class MakeDocBuilder extends TestBuilder {
        @Override
        public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)
                throws InterruptedException, IOException {
            FilePath dir = build.getWorkspace().child("doc");
            dir.mkdirs();
            dir.child("index.html").write("generated by #" + build.number, null);
            return true;
        }
    }

    private static void assertShowsDoc(JenkinsRule r, Action a, String baseUrl, String text) throws Exception {
        assertNotNull(a);
        assertEquals(JavadocArchiver.JAVADOC_ICON, a.getIconFileName());
        try (JenkinsRule.WebClient wc = r.createWebClient()) {
            wc.getOptions().setJavaScriptEnabled(false); // Should not be
            assertThat(wc.goTo(baseUrl + a.getUrlName() + "/").getWebResponse().getContentAsString(), containsString(text));
        }
    }

    private static void assertHidden(Action a) {
        if (a != null) { // allow it to be missing or present but hidden
            assertNull(a.getIconFileName());
        }
    }

    private static class CopyResourceDir extends NullSCM {
        private final FilePath resource;
        private final String target;

        public CopyResourceDir(URL resource, String target) throws URISyntaxException {
            this.resource = new FilePath(new File(resource.toURI()));
            this.target = target;
        }

        @Override
        public void checkout(
                Run<?, ?> build,
                Launcher launcher,
                FilePath workspace,
                TaskListener listener,
                File changelogFile,
                SCMRevisionState baseline)
                throws IOException, InterruptedException {
            resource.copyRecursiveTo(workspace.child(target));
        }
    }
}
